{% macro address(address, options = {}) %}
App.createAddressSelector(
    '{{ address.country.vars.id }}',
    '{{ address.postalCode.vars.id }}',
    '{{ address.city.vars.id }}',
    '{{ address.cityName.vars.id }}',
    '{{ address.cityName.vars.required }}',
    {% if address.region is defined  -%}
        '{{ address.region.vars.id}}'
    {%- else -%}
        null
    {%- endif %},
    {{ options|json_encode|raw }}
);
{% endmacro %}

{% macro ckeditor(element, height, uploadType = false, maxLength = false, removeFormat = false) %}
CKEDITOR.replace('{{ element }}', {
    extraPlugins : 'confighelper',
    removePlugins: 'elementspath',
    height: {{ height|default(200) }},
    resize_enabled: false,
    toolbar: [
        { name: 'tools', items: [ 'Maximize' ] },
        { name: 'clipboard', items: [ 'Undo', 'Redo' ] },
        { name: 'styles', items: [ 'Format' ] },
        { name: 'basicstyles', items: [ 'Bold', 'Italic', 'Strike'{{ removeFormat ? ", '-', 'RemoveFormat'" : '' }} ] },
        { name: 'paragraph', items: [ 'NumberedList', 'BulletedList' ] },
        { name: 'align', items: [ 'JustifyLeft', 'JustifyCenter', 'JustifyRight' ] },
        { name: 'links', items: [ 'Link', 'Image' ] }
    ],
    {% if uploadType %}
        filebrowserUploadUrl: "{{ path('app_filebrowser_upload', { type: uploadType }) }}",
    {% endif %}
    linkShowAdvancedTab: false,
    linkShowTargetTab: false,
});

CKEDITOR.on('dialogDefinition', function(ev) {
    var dialogName = ev.data.name;
    var dialogDefinition = ev.data.definition;

    if ( dialogName == 'link' ) {
        var uploadTab = dialogDefinition.getContents('upload');
        uploadTab.add({
            type: 'html',
            html: '<div>La mise en ligne vous permettra de générer automatiquement une URL pour votre document.</div>'
        });

        uploadTab.label = 'Attacher un document';
        uploadTab.get('upload').label = 'Attachez ici votre document.\nNe partagez rien de confidentiel car il pourra être accessible par toute personne disposant du lien.';
        uploadTab.get('upload').labelStyle = 'white-space: pre;height: 35px;display: block';
        uploadTab.get('upload').style = 'padding-bottom: 2px;height: 60px';
        uploadTab.get('uploadButton').label = 'Mettre en ligne';
        dialogDefinition.title = 'Partage de documents';
        dialogDefinition.getContents('info').get('linkDisplayText').label = "Entrez ici le nom d'affichage de votre lien ou document.";
    }

    if ( dialogName == 'image' ) {
        dialogDefinition.removeContents('Upload');
        dialogDefinition.removeContents('advanced');
    }
});

{% if maxLength is not same as(false) %}
    var maxlength_{{ element }} = $('#{{ element }}').attr("maxlength");
    var text_length_{{ element }} = decodeHtml(CKEDITOR.instances['{{ element }}'].getData().replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, '').replace(/^\s+|\s+$/g, '').replace(/\n/g, ' ')).length;
    $('#{{ element }}_counter').html(text_length_{{ element }}  + '/' + maxlength_{{ element }});

    CKEDITOR.instances['{{ element }}'].on("instanceReady", function(){
        this.document.on("keyup", function() {
            text_length_{{ element }} = decodeHtml(CKEDITOR.instances['{{ element }}'].getData().replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, '').replace(/^\s+|\s+$/g, '').replace(/\n/g, ' ')).length;
            $('#{{ element }}_counter').html(text_length_{{ element }}  + '/' + maxlength_{{ element }});
            if (text_length_{{ element }} > maxlength_{{ element }}) {
                $('#{{ element }}_counter').addClass('form__error');
            } else {
                $('#{{ element }}_counter').removeClass('form__error');
            }
        });
    });
{% endif %}
{% endmacro %}

{% macro simpleCkeditor(element, height) %}
CKEDITOR.replace('{{ element }}', {
    extraPlugins : 'confighelper',
    removePlugins: 'elementspath',
    height: {{ height|default(200) }},
    resize_enabled: false,
    toolbar: [
        { name: 'basicstyles', items: [ 'Bold', 'Italic' ] },
        { name: 'paragraph', items: [ 'BulletedList' ] },
        { name: 'links', items: [ 'Link', 'Unlink' ] }
    ]
});

var maxlength_{{ element }} = $('#{{ element }}').attr("maxlength");
var text_length_{{ element }} = decodeHtml(CKEDITOR.instances['{{ element }}'].getData().replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, '').replace(/^\s+|\s+$/g, '').replace(/\n/g, ' ')).length;
$('#{{ element }}_counter').html(text_length_{{ element }}  + '/' + maxlength_{{ element }});

CKEDITOR.instances['{{ element }}'].on("instanceReady", function(){
    this.document.on("keyup", function() {
        text_length_{{ element }} = decodeHtml(CKEDITOR.instances['{{ element }}'].getData().replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, '').replace(/^\s+|\s+$/g, '').replace(/\n/g, ' ')).length;
        $('#{{ element }}_counter').html(text_length_{{ element }}  + '/' + maxlength_{{ element }});
        if (text_length_{{ element }} > maxlength_{{ element }}) {
            $('#{{ element }}_counter').addClass('form__error');
        } else {
            $('#{{ element }}_counter').removeClass('form__error');
        }
    });
});

{% endmacro %}

{% macro skills(idSkillsField, idSkillSearch, urlSearch, disabledSkillsIdsEnter) %}
$(document).ready(function() {
    var skillList = $('{{ idSkillsField|raw }}');
    var removeSkill = function () {
        var btn = $('.skill-remove');

        btn.unbind('click');
        btn.click(function () {
            $(this).parent().parent().parent().remove();
        });
    };

    var addSkill = function (elem) {
        var skill = $(elem).val().trim();
        if (skill.length > 0) {
            var skillCount = 0;
            $('.summary-skill > input[type=hidden]').each(function () {
                skillCount = Math.max(this.id.replace(/[^0-9]/g, ''), skillCount);
            });
            skillCount++;

            var newSkillWidget = skillList.attr('data-prototype');
            newSkillWidget = newSkillWidget.replace(/__name__/g, skillCount);
            $(newSkillWidget).appendTo(skillList);
            var idNewSkill = "#" + $(newSkillWidget).children('div').attr('id');
            $(idNewSkill).find('input').val(skill);
            $(idNewSkill).find('.skill-value').text(' ' + skill);

            $(elem).val('');
            removeSkill();
        }
    };

    var input = $('{{ idSkillSearch|raw }}');

    // Add skill autocomplete
    input.autocomplete({
        source: function(request, response) {
            var term = request.term.trim();
            if (term.length > 0) {
                $.get("{{ urlSearch|raw }}?term=" + term, function(data) { response(data); });
            } else {
                response([]);
            }
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () {
            },
        }
    });

    // Add skill by pressing Enter
    input.keyup(function (e) {
        if (e.which == 13 || e.keyCode == 13) {
            e.preventDefault();
            addSkill($(this));
        }
    });

    // Prevent submitting form by pressing enter
    var disabledElementsEnter = $('{{ disabledSkillsIdsEnter|e('js') }}');
    disabledElementsEnter.keydown(function (event) {
        if (event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });

    // Add skill by pressing button "Ajouter"
    $('#add_skill').click(function () {
        addSkill($('{{ idSkillSearch|raw }}'));
    });

    removeSkill();
});
{% endmacro %}

{% macro citizenProjectSkills(idCategoryListField, idSkillsListField, urlSearch) %}
$(document).ready(function() {
    var categoryListField = $('{{ idCategoryListField|e('js') }}');
    var checkboxes = $('{{ idSkillsListField|e('js') }}');
    var checkboxesCheckedIds = $.map($("input[name='citizen_project[skills][]']:checked"), function(c){return parseInt(c.value); });

    var updateSkillsField = function () {
        checkboxes.empty();
        if (checkboxes.prev('label').is(":visible") && categoryListField.val()) {
            checkboxes.prev('label').hide();
            checkboxes.removeClass("hidden");
        } else {
            checkboxes.prev('label').show();
        }

        $.ajax({
            url: "{{ urlSearch|e('js') }}?category="+categoryListField.val()
        }).then(function(results) {
            results.map(function(result) {
                var $input = $('<input id="citizen_project_skills_'+result['id']+'" name="citizen_project[skills][]" value='+result['id']+' type="checkbox" '+($.inArray(result['id'], checkboxesCheckedIds) >= 0 ? 'checked=checked' : '')+'>');
                var $label = $('<label class="form form__label" for="citizen_project_skills_'+result['id']+'">'+result['name']+'</label>');
                var $checkbox = $('<div class="form__checkbox">')
                    .append($input)
                    .append($label);

                checkboxes.append($checkbox);
            });
        });
    }

    categoryListField
        .ready(function () {
           updateSkillsField();
        })
        .change(function() {
            updateSkillsField();
        })
    ;
});
{% endmacro %}

{% macro committee(idCommitteesListField, idCommitteeSearchField, urlSearch, disabledCommitteeEnterIds) %}
$(document).ready(function() {
    var committeeList = $('{{ idCommitteesListField|raw }}');
    var removeCommittee = function () {
        var btn = $('.committee-remove');

        btn.unbind('click');
        btn.click(function () {
            $(this).parent().remove();
        });
    };

    var addCommittee = function (item) {
        var committee = item.value,
            label = item.label;

        if (committee.length > 0) {
            var committeeCount = 0;
            $('.summary-committee > input[type=hidden]').each(function () {
                committeeCount = Math.max(this.id.replace(/[^0-9]/g, ''), committeeCount);
            });
            committeeCount++;

            var newCommitteeWidget = committeeList.attr('data-prototype'),
                committeeWidgetId = '#'+committeeList.attr('id')+'_'+committeeCount;
            newCommitteeWidget = newCommitteeWidget.replace(/__name__/g, committeeCount);

            $(newCommitteeWidget).appendTo(committeeList);
            $(committeeWidgetId).val(committee);
            $(committeeWidgetId).parent().find('.committee-value').text(' ' + label);

            $('{{ idCommitteeSearchField|raw }}').val('');
            removeCommittee();
        }
    };

    var input = $('{{ idCommitteeSearchField|raw }}');

    // Add committee autocomplete
    input.autocomplete({
        source: function(request, response) {
            var term = request.term.trim();
            if (term.length > 0) {
                $.get("{{ urlSearch|raw }}?term=" + term, function(data) {
                    var array = $.map(data, function(m) {
                        return {
                            label: m.name,
                            value: m.uuid
                        };
                    });
                    response(array);
                });
            } else {
                response([]);
            }
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () {
            },
        },
        select: function (e, ui) {
            addCommittee(ui.item);

            return false;
        },
        change: function (ev, ui) {
            if (!ui.item) {
                input.val('');
            }

            return false;
        }
    });

    // Add committee by pressing Enter
    input.keyup(function (e) {
        if (e.which == 13 || e.keyCode == 13) {
            e.preventDefault();
            addCommittee($(this));
        }
    });

    // Prevent submitting form by pressing enter
    var disabledElementsEnter = $('{{ disabledCommitteeEnterIds|e('js') }}');
    disabledElementsEnter.keydown(function (event) {
        if (event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });

    removeCommittee();
});
{% endmacro %}

{% macro toggleDisplayingElement(checkboxSelector, elementSelector, checkboxNotSelectedSelector = null) %}
    const checkbox = dom('{{ checkboxSelector|raw }}');
    const element = dom('{{ elementSelector|raw }}');
    var requiredValue = null;

    if (element) {
        const onChange = (event) => {
            if (event.target.checked) {
                removeClass(element.parentElement, 'hidden');
                if (requiredValue) {
                    element.setAttribute('required', requiredValue);
                }
            } else {
                addClass(element.parentElement, 'hidden');
                requiredValue = element.getAttribute('required');
                element.removeAttribute('required');
            }
        };

        on(checkbox, 'change', onChange);

        checkbox.dispatchEvent(new Event('change'));
    }
{% endmacro %}

{% macro toggleDisplayOnClick(elementSelector, listElementSelectors) %}
    $('{{ elementSelector|raw }}').click(function(){
        {% for element in listElementSelectors %}
            $('{{ element|raw }}').toggleClass('visually-hidden');
        {% endfor %}
    });
{% endmacro %}

{% macro chart_acceptation(selector) %}
$(document).ready(function() {
    var element = $("{{ selector }}");

    element.css("visibility", "visible");
    element.dialog({
        height: "auto",
        width: "90%",
        modal: true,
        minHeight: 500,
        position: { my: "center", at: "top" },
        buttons: {
            "{{ 'referent.button.accept'|trans }}": function () {
                $.ajax({
                    url: "{{ path('app_user_set_accept_chart')|e('js') }}",
                    type: 'PUT'
                });

                element.remove();
            }
        },
        beforeClose: function (event, ui) {
            window.location.replace("{{ path('homepage') }}");
        }
    });
});
{% endmacro %}

{% macro toggleMandatesSelect(checkboxSelector, selectSelector) %}
    (function (checkboxSelector, selectSelector) {
        const formElected = $(checkboxSelector);
        const selectMandates = $(selectSelector);

        formElected.click(function() {
            const isChecked = $(this).is(':checked');

            selectMandates.parent().toggle(isChecked);
            selectMandates.attr('required', isChecked);

            if (!isChecked) {
                selectMandates.val('');
            }
        });
        formElected.triggerHandler('click');
    })('{{ checkboxSelector }}', '{{ selectSelector }}');
{% endmacro %}
